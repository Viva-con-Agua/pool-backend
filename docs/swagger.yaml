basePath: /v1
definitions:
  models.Active:
    properties:
      crew_id:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      since:
        type: integer
      status:
        type: string
      user_id:
        type: string
    type: object
  models.Activity:
    properties:
      comment:
        type: string
      id:
        type: string
      model_id:
        type: string
      model_type:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      status:
        type: string
      user:
        $ref: "#/definitions/models.UserDatabase"
      user_id:
        type: string
    type: object
  models.Address:
    properties:
      additional:
        type: string
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      number:
        type: string
      street:
        type: string
      user_id:
        type: string
      zip:
        type: string
    type: object
  models.AddressCreate:
    properties:
      additional:
        type: string
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      number:
        type: string
      street:
        type: string
      zip:
        type: string
    required:
      - city
      - country
      - country_code
      - number
      - street
      - zip
    type: object
  models.AddressUpdate:
    properties:
      additional:
        type: string
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      id:
        type: string
      number:
        type: string
      street:
        type: string
      user_id:
        type: string
      zip:
        type: string
    type: object
  models.Artist:
    properties:
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
    type: object
  models.ArtistCreate:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  models.ArtistUpdate:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.Avatar:
    properties:
      file_id:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      user_id:
        type: string
    type: object
  models.AvatarFile:
    properties:
      file: {}
      header:
        $ref: "#/definitions/multipart.FileHeader"
    type: object
  models.City:
    properties:
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      place_id:
        type: string
      position:
        $ref: "#/definitions/vmod.Position"
    type: object
  models.Crew:
    properties:
      abbreviation:
        type: string
      additional:
        type: string
      asp_selection:
        type: string
      cities:
        items:
          $ref: "#/definitions/models.City"
        type: array
      email:
        type: string
      id:
        type: string
      mailbox_id:
        type: string
      mattermost_username:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
      organisation:
        $ref: "#/definitions/models.Organisation"
      organisation_id:
        type: string
      status:
        type: string
    type: object
  models.CrewCreate:
    properties:
      abbreviation:
        type: string
      additional:
        type: string
      asp_selection:
        type: string
      cities:
        items:
          $ref: "#/definitions/models.City"
        type: array
      email:
        type: string
      mattermost_username:
        type: string
      name:
        type: string
      organisation_id:
        type: string
      status:
        type: string
    type: object
  models.CrewPublic:
    properties:
      cities:
        items:
          $ref: "#/definitions/models.City"
        type: array
      id:
        type: string
      mattermost_username:
        type: string
      name:
        type: string
      organisation:
        $ref: "#/definitions/models.Organisation"
      organisation_id:
        type: string
    type: object
  models.CrewUpdate:
    properties:
      abbreviation:
        type: string
      additional:
        type: string
      asp_selection:
        type: string
      cities:
        items:
          $ref: "#/definitions/models.City"
        type: array
      email:
        type: string
      id:
        type: string
      mattermost_username:
        type: string
      name:
        type: string
      organisation_id:
        type: string
      status:
        type: string
    type: object
  models.Deposit:
    properties:
      confirmer:
        $ref: "#/definitions/models.User"
      creator:
        $ref: "#/definitions/models.User"
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      date_of_deposit:
        type: integer
      deposit_units:
        items:
          $ref: "#/definitions/models.DepositUnit"
        type: array
      external:
        $ref: "#/definitions/models.External"
      has_external:
        type: boolean
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      reason_for_payment:
        type: string
      receipts:
        items:
          $ref: "#/definitions/models.ReceiptFile"
        type: array
      status:
        type: string
    type: object
  models.DepositCreate:
    properties:
      crew_id:
        type: string
      deposit_units:
        items:
          $ref: "#/definitions/models.DepositUnitCreate"
        type: array
      external:
        $ref: "#/definitions/models.External"
      has_external:
        type: boolean
    required:
      - crew_id
    type: object
  models.DepositDatabase:
    properties:
      confirmer_id:
        type: string
      creator_id:
        type: string
      crew_id:
        type: string
      date_of_deposit:
        type: integer
      external:
        $ref: "#/definitions/models.External"
      has_external:
        type: boolean
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      reason_for_payment:
        type: string
      status:
        type: string
    type: object
  models.DepositUnit:
    properties:
      deposit_id:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      status:
        type: string
      taking:
        $ref: "#/definitions/models.Taking"
      taking_id:
        type: string
    type: object
  models.DepositUnitCreate:
    properties:
      money:
        $ref: "#/definitions/vmod.Money"
      taking_id:
        type: string
    type: object
  models.DepositUnitTaking:
    properties:
      deposit:
        $ref: "#/definitions/models.DepositDatabase"
      deposit_id:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      status:
        type: string
      taking:
        $ref: "#/definitions/models.Taking"
      taking_id:
        type: string
    type: object
  models.DepositUnitUpdate:
    properties:
      deposit_id:
        type: string
      id:
        type: string
      money:
        $ref: "#/definitions/vmod.Money"
      status:
        type: string
      taking_id:
        type: string
      update_state:
        type: string
    type: object
  models.DepositUpdate:
    properties:
      crew_id:
        type: string
      date_of_deposit:
        type: integer
      deposit_units:
        items:
          $ref: "#/definitions/models.DepositUnitUpdate"
        type: array
      external:
        $ref: "#/definitions/models.External"
      has_external:
        type: boolean
      id:
        type: string
      money:
        $ref: "#/definitions/vmod.Money"
      status:
        type: string
      update_state:
        type: string
    type: object
  models.Event:
    properties:
      additional_information:
        type: string
      application:
        $ref: "#/definitions/models.EventApplication"
      applications:
        $ref: "#/definitions/models.EventApplications"
      artist_ids:
        items:
          type: string
        type: array
      artists:
        items:
          $ref: "#/definitions/models.Artist"
        type: array
      creator:
        $ref: "#/definitions/models.User"
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      deposit_id:
        type: string
      editor_id:
        type: string
      end_at:
        type: integer
      event_asp:
        $ref: "#/definitions/models.User"
      event_asp_id:
        type: string
      event_state:
        $ref: "#/definitions/models.EventState"
      event_tools:
        $ref: "#/definitions/models.EventTools"
      external_asp:
        $ref: "#/definitions/models.UserExternal"
      id:
        type: string
      internal_asp:
        $ref: "#/definitions/models.User"
      internal_asp_id:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      meeting_url:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
      organisation_id:
        type: string
      organizer:
        $ref: "#/definitions/models.Organizer"
      organizer_id:
        type: string
      participations:
        items:
          $ref: "#/definitions/models.Participation"
        type: array
      start_at:
        type: integer
      taking_id:
        type: string
      tour_id:
        type: string
      type_of_event:
        type: string
      website:
        type: string
    type: object
  models.EventASPPublic:
    properties:
      display_name:
        type: string
      email:
        type: string
      full_name:
        type: string
      mattermost_username:
        type: string
      phone:
        type: string
    type: object
  models.EventApplication:
    properties:
      end_date:
        type: integer
      start_date:
        type: integer
      supporter_count:
        type: integer
    type: object
  models.EventApplications:
    properties:
      confirmed:
        type: integer
      rejected:
        type: integer
      requested:
        type: integer
      total:
        type: integer
      withdrawn:
        type: integer
    type: object
  models.EventCreate:
    properties:
      additional_information:
        type: string
      application:
        $ref: "#/definitions/models.EventApplication"
      artist_ids:
        items:
          type: string
        type: array
      crew_id:
        type: string
      end_at:
        type: integer
      event_asp_id:
        type: string
      event_state:
        $ref: "#/definitions/models.EventState"
      event_tools:
        $ref: "#/definitions/models.EventTools"
      external_asp:
        $ref: "#/definitions/models.UserExternal"
      internal_asp_id:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      meeting_url:
        type: string
      name:
        type: string
      organisation_id:
        type: string
      organizer_id:
        type: string
      start_at:
        type: integer
      tour_id:
        type: string
      type_of_event:
        type: string
      website:
        type: string
    type: object
  models.EventDetails:
    properties:
      event_asp:
        $ref: "#/definitions/models.EventASPPublic"
      meeting_url:
        type: string
    type: object
  models.EventPublic:
    properties:
      additional_information:
        type: string
      application:
        $ref: "#/definitions/models.EventApplication"
      artist_ids:
        items:
          type: string
        type: array
      artists:
        items:
          $ref: "#/definitions/models.Artist"
        type: array
      crew:
        $ref: "#/definitions/models.CrewPublic"
      crew_id:
        type: string
      end_at:
        type: integer
      event_state:
        $ref: "#/definitions/models.EventStatePublic"
      event_tools:
        $ref: "#/definitions/models.EventTools"
      id:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
      organisation:
        $ref: "#/definitions/models.Organisation"
      organizer:
        $ref: "#/definitions/models.Organizer"
      organizer_id:
        type: string
      start_at:
        type: integer
      tour_id:
        type: string
      type_of_event:
        type: string
      website:
        type: string
    type: object
  models.EventState:
    properties:
      crew_confirmation:
        type: string
      deposit_id:
        type: string
      internal_confirmation:
        type: string
      state:
        type: string
      taking_id:
        type: string
    type: object
  models.EventStatePublic:
    properties:
      state:
        type: string
    type: object
  models.EventTools:
    properties:
      special:
        type: string
      tools:
        items:
          type: string
        type: array
    type: object
  models.EventUpdate:
    properties:
      additional_information:
        type: string
      application:
        $ref: "#/definitions/models.EventApplication"
      artist_ids:
        items:
          type: string
        type: array
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      end_at:
        type: integer
      event_asp_id:
        type: string
      event_state:
        $ref: "#/definitions/models.EventState"
      event_tools:
        $ref: "#/definitions/models.EventTools"
      external_asp:
        $ref: "#/definitions/models.UserExternal"
      id:
        type: string
      internal_asp_id:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      meeting_url:
        type: string
      name:
        type: string
      organisation_id:
        type: string
      organizer_id:
        type: string
      start_at:
        type: integer
      tour_id:
        type: string
      type_of_event:
        type: string
      website:
        type: string
    type: object
  models.External:
    properties:
      address:
        type: string
      asp:
        type: string
      email:
        type: string
      organisation:
        type: string
      purpose:
        type: string
      reason_for_payment:
        type: string
      reciept:
        type: boolean
    type: object
  models.ListDetailsEvent:
    properties:
      additional_information:
        type: string
      application:
        $ref: "#/definitions/models.EventApplication"
      applications:
        $ref: "#/definitions/models.EventApplications"
      artist_ids:
        items:
          type: string
        type: array
      artists:
        items:
          $ref: "#/definitions/models.Artist"
        type: array
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      end_at:
        type: integer
      event_asp:
        $ref: "#/definitions/models.EventASPPublic"
      event_asp_id:
        type: string
      event_state:
        $ref: "#/definitions/models.EventState"
      event_tools:
        $ref: "#/definitions/models.EventTools"
      id:
        type: string
      internal_asp_id:
        type: string
      location:
        $ref: "#/definitions/models.Location"
      meeting_url:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
      organizer:
        $ref: "#/definitions/models.Organizer"
      organizer_id:
        type: string
      participations:
        items:
          $ref: "#/definitions/models.ParticipationMinimal"
        type: array
      start_at:
        type: integer
      tour_id:
        type: string
      type_of_event:
        type: string
      website:
        type: string
    type: object
  models.Location:
    properties:
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      name:
        type: string
      number:
        type: string
      place_id:
        type: string
      position:
        $ref: "#/definitions/models.Position"
      street:
        type: string
      sublocality:
        type: string
      zip:
        type: string
    type: object
  models.NVM:
    properties:
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      since:
        type: integer
      status:
        type: string
      user_id:
        type: string
    type: object
  models.Newsletter:
    properties:
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      user_id:
        type: string
      value:
        type: string
    type: object
  models.Organisation:
    properties:
      abbreviation:
        type: string
      default_asp:
        $ref: "#/definitions/models.UserContact"
      default_asp_id:
        type: string
      email:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
    type: object
  models.Organizer:
    properties:
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
    type: object
  models.Participation:
    properties:
      comment:
        type: string
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      event:
        $ref: "#/definitions/models.Event"
      event_id:
        type: string
      id:
        type: string
      modified:
        allOf:
          - $ref: "#/definitions/vmod.Modified"
        description: Confirmer UserInternal   `json:"confirmer" bson:"confirmer"`
      status:
        type: string
      user:
        $ref: "#/definitions/models.User"
      user_id:
        type: string
    type: object
  models.ParticipationMinimal:
    properties:
      event_id:
        type: string
      id:
        type: string
      status:
        type: string
    type: object
  models.Position:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  models.Profile:
    properties:
      birthdate:
        type: integer
      birthdate_datetime:
        type: string
      gender:
        type: string
      id:
        type: string
      mattermost_username:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      phone:
        type: string
      user_id:
        type: string
    type: object
  models.ProfileMinimal:
    properties:
      birthdate:
        type: integer
      birthdate_datetime:
        type: string
      mattermost_username:
        type: string
      user_id:
        type: string
    type: object
  models.ReceiptFile:
    properties:
      deposit_id:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
    type: object
  models.Source:
    properties:
      description:
        type: string
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      norms:
        type: string
      payment_type:
        type: string
      taking_id:
        type: string
      value:
        type: string
    type: object
  models.Taking:
    properties:
      activities:
        items:
          $ref: "#/definitions/models.Activity"
        type: array
      comment:
        type: string
      creator:
        $ref: "#/definitions/models.UserDatabase"
      crew:
        $ref: "#/definitions/models.Crew"
      crew_id:
        type: string
      date_of_taking:
        type: integer
      deposit_units:
        items:
          $ref: "#/definitions/models.DepositUnitTaking"
        type: array
      editor_id:
        type: string
      event:
        $ref: "#/definitions/models.Event"
      id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      money:
        $ref: "#/definitions/vmod.Money"
      name:
        type: string
      sources:
        items:
          $ref: "#/definitions/models.Source"
        type: array
      state:
        $ref: "#/definitions/models.TakingState"
      type:
        type: string
    type: object
  models.TakingState:
    properties:
      confirmed:
        $ref: "#/definitions/vmod.Money"
      no_income:
        type: boolean
      open:
        $ref: "#/definitions/vmod.Money"
      wait:
        $ref: "#/definitions/vmod.Money"
    type: object
  models.User:
    properties:
      active:
        $ref: "#/definitions/models.Active"
      address:
        $ref: "#/definitions/models.Address"
      address_id:
        type: string
      avatar:
        $ref: "#/definitions/models.Avatar"
      confirmed:
        type: boolean
      country:
        type: string
      crew:
        $ref: "#/definitions/models.UserCrew"
      display_name:
        type: string
      drops_id:
        description: extends the vcago.User
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_login_date:
        type: integer
      last_name:
        type: string
      last_update:
        type: string
      mailbox_id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      newsletter:
        items:
          $ref: "#/definitions/models.Newsletter"
        type: array
      nvm:
        $ref: "#/definitions/models.NVM"
      organisation:
        type: string
      organisation_id:
        type: string
      pool_roles:
        items:
          $ref: "#/definitions/vmod.Role"
        type: array
      privacy_policy:
        type: boolean
      profile:
        $ref: "#/definitions/models.Profile"
      system_roles:
        items:
          $ref: "#/definitions/vmod.Role"
        type: array
    type: object
  models.UserContact:
    properties:
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      profile:
        $ref: "#/definitions/models.ProfileMinimal"
    type: object
  models.UserCrew:
    properties:
      crew_id:
        type: string
      email:
        type: string
      id:
        type: string
      mailbox_id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      name:
        type: string
      organisation:
        type: string
      organisation_id:
        type: string
      roles:
        items:
          $ref: "#/definitions/vmod.Role"
        type: array
      user_id:
        type: string
    type: object
  models.UserDatabase:
    properties:
      confirmed:
        type: boolean
      country:
        type: string
      display_name:
        type: string
      drops_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      full_name:
        type: string
      id:
        type: string
      last_login_date:
        type: integer
      last_name:
        type: string
      last_update:
        type: string
      mailbox_id:
        type: string
      modified:
        $ref: "#/definitions/vmod.Modified"
      organisation_id:
        type: string
      privacy_policy:
        type: boolean
      system_roles:
        items:
          $ref: "#/definitions/vmod.Role"
        type: array
    required:
      - email
      - first_name
      - last_name
    type: object
  models.UserExternal:
    properties:
      display_name:
        type: string
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
    type: object
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: "#/definitions/textproto.MIMEHeader"
      size:
        type: integer
    type: object
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  vcago.BindErrorResponse:
    properties:
      list_size:
        type: integer
      message:
        example: bind error
        type: string
      model:
        type: string
      payload:
        example:
          - cant bind string to int
        items:
          type: string
        type: array
      type:
        example: error
        type: string
    type: object
  vcago.MongoDuplicatedErrorResponse:
    properties:
      list_size:
        type: integer
      message:
        example: "duplicate key error: <key>"
        type: string
      model:
        type: string
      payload: {}
      type:
        example: error
        type: string
    type: object
  vcago.MongoNoDocumentErrorResponse:
    properties:
      list_size:
        type: integer
      message:
        example: document not found
        type: string
      model:
        type: string
      payload: {}
      type:
        example: error
        type: string
    type: object
  vcago.Response:
    properties:
      list_size:
        type: integer
      message:
        type: string
      model:
        type: string
      payload: {}
      type:
        type: string
    type: object
  vcago.ResponseCreated:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_created
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ResponseDeleted:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_deleted
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ResponseListed:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_selected
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ResponseSelected:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_selected
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ResponseSynced:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_synced
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ResponseUpdated:
    properties:
      list_size:
        type: integer
      message:
        example: successfully_updated
        type: string
      model:
        type: string
      payload: {}
      type:
        example: success
        type: string
    type: object
  vcago.ValidationErrorResponse:
    properties:
      list_size:
        type: integer
      message:
        example: validate error
        type: string
      model:
        type: string
      payload:
        example:
          - currency is required
        items:
          type: string
        type: array
      type:
        example: error
        type: string
    type: object
  vmod.DeletedResponse:
    properties:
      id:
        type: string
    type: object
  vmod.Modified:
    properties:
      created:
        type: integer
      updated:
        type: integer
    type: object
  vmod.Money:
    description: Beispiel eines benutzerdefinierten Geldtyps
    properties:
      amount:
        type: integer
      currency:
        type: string
    required:
      - currency
    type: object
  vmod.Position:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  vmod.Role:
    properties:
      id:
        type: string
      name:
        type: string
      root:
        type: string
      user_id:
        type: string
    type: object
host: pool3-api.vivaconagua.org
info:
  contact: {}
  title: Pool API documentation
  version: 3.0.0
paths:
  /crews:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: name
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisation_id
          type: array
        - in: query
          name: organisation_name
          type: string
        - in: query
          name: status
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.Crew"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of  Crews
      tags:
        - Crew
    post:
      consumes:
        - application/json
      description: creates an  Crew object.
      parameters:
        - description: Crew Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.CrewCreate"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Crew"
                type: object
      security:
        - CookieAuth: []
      summary: Create a Crew
      tags:
        - Crew
    put:
      consumes:
        - application/json
      parameters:
        - description: Crew Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.CrewUpdate"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Crew"
                type: object
      security:
        - CookieAuth: []
      summary: Update a Crew
      tags:
        - Crew
  /crews/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Crew ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vmod.DeletedResponse"
      security:
        - CookieAuth: []
      summary: Delete a Crew by ID
      tags:
        - Crew
  /crews/public:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: name
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisation_id
          type: array
        - in: query
          name: organisation_name
          type: string
        - in: query
          name: status
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.CrewPublic"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      summary: Get a List of CrewPublic
      tags:
        - Crew
  /events/artist:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - in: query
          name: id
          type: string
        - in: query
          name: name
          type: string
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.Artist"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of Artists
      tags:
        - Artist
    post:
      consumes:
        - application/json
      description: creates an  Artist object.
      parameters:
        - description: Artist Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.ArtistCreate"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Artist"
                type: object
      security:
        - CookieAuth: []
      summary: Create a Artist
      tags:
        - Artist
    put:
      consumes:
        - application/json
      parameters:
        - description: Artist Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.ArtistUpdate"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Artist"
                type: object
      security:
        - CookieAuth: []
      summary: Get a Artist by ID
      tags:
        - Artist
  /events/artist/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Artist ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vmod.DeletedResponse"
      security:
        - CookieAuth: []
      summary: Get a  Artist by ID
      tags:
        - Artist
    get:
      consumes:
        - application/json
      parameters:
        - description: Artist ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Artist"
                type: object
      security:
        - CookieAuth: []
      summary: Get a  Artist by ID
      tags:
        - Artist
  /events/event:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - in: query
          name: endAt
          type: string
        - in: query
          name: eventASPID
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: eventState
          type: array
        - in: query
          name: fullCount
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: internalASPID
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: missingApplications
          type: boolean
        - in: query
          name: name
          type: string
        - in: query
          name: onlyApply
          type: boolean
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisationId
          type: array
        - in: query
          name: search
          type: string
        - in: query
          name: skip
          type: integer
        - in: query
          name: sortDirection
          type: string
        - in: query
          name: sortField
          type: string
        - in: query
          name: startAt
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: type
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.Event"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of Event
      tags:
        - Event
    post:
      consumes:
        - application/json
      description: creates an Event object.
      parameters:
        - description: Event Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.EventCreate"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Event"
                type: object
      security:
        - CookieAuth: []
      summary: Create a Event
      tags:
        - Event
    put:
      consumes:
        - application/json
      parameters:
        - description: Event Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.EventUpdate"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Event"
                type: object
      security:
        - CookieAuth: []
      summary: Update a Event
      tags:
        - Event
  /events/event/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vmod.DeletedResponse"
      security:
        - CookieAuth: []
      summary: Delete a Event by ID
      tags:
        - Event
    get:
      consumes:
        - application/json
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Event"
                type: object
      security:
        - CookieAuth: []
      summary: Get a Event by ID
      tags:
        - Event
  /events/event/details/{id}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.EventDetails"
                type: object
      summary: Get a Event by ID
      tags:
        - Event
  /events/event/email:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - in: query
          name: endAt
          type: string
        - in: query
          name: eventASPID
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: eventState
          type: array
        - in: query
          name: fullCount
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: internalASPID
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: missingApplications
          type: boolean
        - in: query
          name: name
          type: string
        - in: query
          name: onlyApply
          type: boolean
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisationId
          type: array
        - in: query
          name: search
          type: string
        - in: query
          name: skip
          type: integer
        - in: query
          name: sortDirection
          type: string
        - in: query
          name: sortField
          type: string
        - in: query
          name: startAt
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: type
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.EventPublic"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of Event
      tags:
        - Event
  /events/event/public:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - in: query
          name: endAt
          type: string
        - in: query
          name: eventASPID
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: eventState
          type: array
        - in: query
          name: fullCount
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: internalASPID
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: missingApplications
          type: boolean
        - in: query
          name: name
          type: string
        - in: query
          name: onlyApply
          type: boolean
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisationId
          type: array
        - in: query
          name: search
          type: string
        - in: query
          name: skip
          type: integer
        - in: query
          name: sortDirection
          type: string
        - in: query
          name: sortField
          type: string
        - in: query
          name: startAt
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: type
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.EventPublic"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      summary: Get a List of Event
      tags:
        - Event
  /events/event/sync/{id}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Sync Event by ID
      tags:
        - Event
  /events/event/user:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - in: query
          name: endAt
          type: string
        - in: query
          name: eventASPID
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: eventState
          type: array
        - in: query
          name: fullCount
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: internalASPID
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: missingApplications
          type: boolean
        - in: query
          name: name
          type: string
        - in: query
          name: onlyApply
          type: boolean
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: organisationId
          type: array
        - in: query
          name: search
          type: string
        - in: query
          name: skip
          type: integer
        - in: query
          name: sortDirection
          type: string
        - in: query
          name: sortField
          type: string
        - in: query
          name: startAt
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: type
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.ListDetailsEvent"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of Event
      tags:
        - Event
  /events/event/view/{id}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Event ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.EventPublic"
                type: object
      summary: Get a Event by ID
      tags:
        - Event
  /finances/deposit:
    get:
      consumes:
        - application/json
      parameters:
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: confirmer
          type: array
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: creator
          type: array
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - in: query
          name: hasExternal
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: limit
          type: integer
        - in: query
          name: name
          type: string
        - in: query
          name: reasonForPayment
          type: string
        - in: query
          name: search
          type: string
        - in: query
          name: skip
          type: integer
        - in: query
          name: sortDirection
          type: string
        - in: query
          name: sortField
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: status
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.ResponseListed"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.Deposit"
                    type: array
                type: object
      security:
        - CookieAuth: []
      summary: Get a List of Deposit
      tags:
        - Deposit
    post:
      consumes:
        - application/json
      description: creates an Deposit object.
      parameters:
        - description: Deposit Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.DepositCreate"
      produces:
        - application/json
      responses:
        "201":
          description: Successfully Created Deposit
          schema:
            allOf:
              - $ref: "#/definitions/vcago.ResponseCreated"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Deposit"
                type: object
        "400":
          description: Validation Error
          schema:
            $ref: "#/definitions/vcago.ValidationErrorResponse"
        "409":
          description: Duplicated Key
          schema:
            $ref: "#/definitions/vcago.MongoDuplicatedErrorResponse"
      security:
        - CookieAuth: []
      summary: Create a Deposit
      tags:
        - Deposit
    put:
      consumes:
        - application/json
      parameters:
        - description: Deposit Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.DepositUpdate"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.ResponseUpdated"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Deposit"
                type: object
        "400":
          description: Validation Error
          schema:
            $ref: "#/definitions/vcago.ValidationErrorResponse"
        "404":
          description: No Document with given ID
          schema:
            $ref: "#/definitions/vcago.MongoNoDocumentErrorResponse"
      security:
        - CookieAuth: []
      summary: Update a Deposit
      tags:
        - Deposit
  /finances/deposit/{id}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Deposit ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.ResponseSelected"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Deposit"
                type: object
        "404":
          description: No Document with given ID
          schema:
            $ref: "#/definitions/vcago.MongoNoDocumentErrorResponse"
      security:
        - CookieAuth: []
      summary: Get a Deposit by ID
      tags:
        - Deposit
  /finances/deposit/sync/{id}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Deposit ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vcago.ResponseSynced"
        "404":
          description: No Document with given ID
          schema:
            $ref: "#/definitions/vcago.MongoNoDocumentErrorResponse"
      security:
        - CookieAuth: []
      summary: Sync Deposit by ID
      tags:
        - Deposit
  /fincances/deposit/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Deposit ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.ResponseDeleted"
              - properties:
                  payload:
                    type: string
                type: object
        "404":
          description: No Document with given ID
          schema:
            $ref: "#/definitions/vcago.MongoNoDocumentErrorResponse"
      security:
        - CookieAuth: []
      summary: Delete a Deposit by ID
      tags:
        - Deposit
  /users/address:
    get:
      consumes:
        - application/json
      parameters:
        - in: query
          name: createdFrom
          type: string
        - in: query
          name: createdTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: crewID
          type: array
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: id
          type: array
        - in: query
          name: updatedFrom
          type: string
        - in: query
          name: updatedTo
          type: string
        - collectionFormat: csv
          in: query
          items:
            type: string
          name: userID
          type: array
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    items:
                      $ref: "#/definitions/models.Address"
                    type: array
                type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/vcago.Response"
      security:
        - CookieAuth: []
      summary: Get a List of  Addresss
      tags:
        - Address
    post:
      consumes:
        - application/json
      description: creates an  Address object.
      parameters:
        - description: Address Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.AddressCreate"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Address"
                type: object
      security:
        - CookieAuth: []
      summary: Create a Address
      tags:
        - Address
    put:
      consumes:
        - application/json
      parameters:
        - description: Address Data
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.AddressUpdate"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Address"
                type: object
      security:
        - CookieAuth: []
      summary: Get a  Address by ID
      tags:
        - Address
  /users/address/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Address ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vmod.DeletedResponse"
      security:
        - CookieAuth: []
      summary: Delete a  Address by ID
      tags:
        - Address
    get:
      consumes:
        - application/json
      parameters:
        - description: Crew ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Crew"
                type: object
      security:
        - CookieAuth: []
      summary: Get a Crew by ID
      tags:
        - Crew
  /users/avatar:
    post:
      consumes:
        - application/json
      description: creates an  Avatar object.
      parameters:
        - description: Avatar File
          in: body
          name: form
          required: true
          schema:
            $ref: "#/definitions/models.AvatarFile"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
              - $ref: "#/definitions/vcago.Response"
              - properties:
                  payload:
                    $ref: "#/definitions/models.Avatar"
                type: object
      security:
        - CookieAuth: []
      summary: Uploads a Avatar
      tags:
        - Avatar
  /users/avatar/{id}:
    delete:
      consumes:
        - application/json
      parameters:
        - description: Avatar ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/vmod.DeletedResponse"
      security:
        - CookieAuth: []
      summary: Get a  Avatar by ID
      tags:
        - Avatar
    get:
      consumes:
        - application/json
      parameters:
        - description: Avatar ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - image/png
      responses:
        "200":
          description: Download Image
          schema:
            type: file
      security:
        - CookieAuth: []
      summary: Get a  Avatar by ID
      tags:
        - Avatar
schemes:
  - https
securityDefinitions:
  ApiKeyAuth:
    description: Bearer key
    in: header
    name: Authorization
    type: apiKey
  CookieAuth:
    in: cookie
    name: access_cookie
    type: apiKey
  OAuth2AccessCode:
    authorizationUrl: https://hydra.vivaconagua.org/oauth/authorize
    flow: accessCode
    tokenUrl: https://hydra.vivaconagua.org/oauth/token
    type: oauth2
swagger: "2.0"
